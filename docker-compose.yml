volumes:
  postgres-data:


services:
  postgres:
    image: postgres:14-alpine
    volumes:
      # We'll store the postgres data in the 'postgres_data' volume we defined:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
    ports:
      - target: 5432
        published: 5433
    environment:
      POSTGRES_USER: ${USER:-you}
      POSTGRES_HOST_AUTH_METHOD: trust
    profiles:
      - testing
      - development

  chrome:
    image: browserless/chrome:1.57-puppeteer-13.1.3
    ports:
      - target: 3333
        published: 3333
    # Mount application source code to support file uploading
    # (otherwise Chrome won't be able to find files).
    # NOTE: Make sure you use absolute paths in `#attach_file`.
    volumes:
      - type: bind
        source: .
        target: /workspaces/rails-docker-vscode
    environment:
      # By default, it uses 3000, which is typically used by Rails.
      PORT: 3333
      # Set connection timeout to avoid timeout exception during debugging
      # https://docs.browserless.io/docs/docker.html#connection-timeout
      CONNECTION_TIMEOUT: 600000
    profiles:
      - development
      - testing

  # The tests container:
  tests:
    &app
    build:
      &app_build
      context: .
      dockerfile: Dockerfile
      target: testing
      args:
        DEVELOPER_UID: ${UID:-1000}
        DEVELOPER_USERNAME: ${USER:-you}
    image: kurenn/rails-docker-vscode${TESTING_IMAGE_TAG:-:testing}

    volumes:
      # Mount the app code into the app containers:
      - .:/workspaces/rails-docker-vscode

    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true

    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

    # Required for ptrace-based debuggers like C++, Go, and Rust
    cap_add:
      - SYS_PTRACE
      - NET_ADMIN
    security_opt:
      - seccomp:unconfined

    # Link to our postgres and redis services, so they can be visible from our
    # app service containers:
    depends_on:
      - chrome
      - postgres

    # The command we want to execute by default when running the container
    command: rspec

    # Specify environment variables available for our app containers. We'll
    # leave a YML anchor in case we need to override or add more variables if
    # needed on each app service:
    environment:
      &app_env
      RAILS_LOG_TO_STDOUT: "true"
      DEBIAN_FRONTEND: dialog
      RAILS_ENV: test

      # Tells the test suite to use the "chrome" service instead of a local
      # chrome install:
      CHROME_URL: http://chrome:3333
      CHROME_PUBLIC_URL: ${RAILS_DOCKER_VSCODE_CHROME_PUBLIC_URL:-http://localhost:3333}

      DATABASE_URL: postgres://postgres:5432/?encoding=unicode
        # Simplecov checks for the presence of this variable to generate a report
        # with the format required by codeclimate... which is a bit lame...
    profiles:
      - testing

  # The development container:
  development:
    <<: *app
    build:
      <<: *app_build
      target: development

    image: kurenn/rails-docker-vscode:development

    ports:
      - ${RAILS_DOCKER_VSCODE_PORT:-3000}:3000

    # The command we want to execute by default when running the container
    command: rails server -b 0.0.0.0

    environment:
      <<: *app_env
      RAILS_ENV: development

    profiles:
      - development
